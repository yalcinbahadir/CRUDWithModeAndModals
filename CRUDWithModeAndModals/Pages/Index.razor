@page "/"
<TelerikContextMenu Data="ContextMenu"
                    Selector=".target"
                    TextField="Text"
                    IconField="Icon"
                    SeparatorField="Separator"
                    OnClick="@((ContextMenuItem item)=>HandelRMC(item))">
</TelerikContextMenu>
<div class="target">
    <TelerikGrid Data="Students"
                 AutoGenerateColumns="true"
                 Pageable="true"
                 OnRowDoubleClick="HandelDoubleClick"
                 SelectionMode="GridSelectionMode.Multiple"
                 SelectedItemsChanged="@((IEnumerable<Student> newlySelectedStudents)=>SetSelectedItems(newlySelectedStudents))">
                
        <GridToolBar>
            <GridCommandButton OnClick="Create" Icon="add" />
            <GridCommandButton Icon="reload" OnClick="Reload"></GridCommandButton>
        </GridToolBar>
        <GridColumns>
            <GridAutoGeneratedColumns></GridAutoGeneratedColumns>
        </GridColumns>
       
    </TelerikGrid>
</div>

<StudentModal ModalMode="ModalMode" IsVisible="ModalMode !=ModalMode.None" 
              SelectedStudents="SelectedStudents"
             
              NotifyCreate="HandelCreate"
              NotifyUpdate="HandelUpdate"
              NotifyDelete="HandelDelete"
              NotifyClose="HandelClose"/>



@using CRUDWithModeAndModals.Data
@code{
    private List<ContextMenuItem> ContextMenu;
    public List<Student> Students { get; set; } = new();
    public List<Student> SelectedStudents { get; set; } = new();
    public ModalMode ModalMode { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }


    protected override Task OnInitializedAsync()
    {
        Students = DataProvider.GetStudents();

        SetContextMenu();
        ModalMode = ModalMode.None;
        return base.OnInitializedAsync();
    }


    private void SetContextMenu()
    {
        ContextMenu = new List<ContextMenuItem> {
            new ContextMenuItem{ Text="Update", Icon="edit", Command=Command.Update},
            new ContextMenuItem{ Text="Delete", Icon="delete", Command=Command.Delete}
        };

    }



    private void Reload()
    {

    }



    private void Create()
    {
        ModalMode = ModalMode.Create;
    }
    private void Update()
    {
        var studentToUpdate = SelectedStudents;
        ModalMode = ModalMode.Update;
    }
    private void Delete()
    {
        var studentToDelete = SelectedStudents;
        ModalMode = ModalMode.Delete;
    }
    private void HandelDoubleClick()
    {
        ModalMode = ModalMode.Update;
    }


    private void SetSelectedItems(IEnumerable<Student> newlySelectedStudents)
    {
        SelectedStudents = newlySelectedStudents.ToList();
    }

    private void HandelRMC(ContextMenuItem item)
    {
        if (SelectedStudents.Count > 0)
        {
            switch (item.Command)
            {
                case Command.Update:
                    Update();
                    break;
                case Command.Delete:
                    Delete();
                    break;
                default:
                    break;
            }
        }

    }

    private void HandelClose()
    {
        ModalMode = ModalMode.None;
    }

    private void HandelCreate(Student student)
    {
        DataProvider.Create(student);
        NavigationManager.NavigateTo("/", true);
    }
    private void HandelDelete(int[] idsToDelete)
    {
        DataProvider.Remove(idsToDelete);

        NavigationManager.NavigateTo("/", true);
    }

    private void HandelUpdate(Dictionary<int,Student> student)
    {
        foreach (var item in student)
        {

            DataProvider.Update(item.Key, item.Value);
        }

    }


}